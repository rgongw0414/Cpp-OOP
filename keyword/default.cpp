// =default;
// This ensures that you can still create an Example object without providing any arguments, even though a parameterized constructor is defined.

// If no default constructor is defined, the compiler will not generate one for you, when other constructors are defined.
class A {
public:
    // A() {}
    A(int a) {}
};

class B {
public:
    B() = default; // tell the compiler to generate the default constructor
    B(int b) {}
    ~B() = default; // tell the compiler to generate the default destructor
};    
    
int main() {
    A a; // Error: no matching function for call to 'A::A()'; no default constructor exists for class "A"
    B b; // default constructor generated by the compiler: B::B() is called
    return 0;
}